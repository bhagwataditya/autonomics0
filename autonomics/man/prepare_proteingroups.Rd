% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prepare_omics.R
\name{prepare_proteingroups}
\alias{prepare_proteingroups}
\title{Prepare proteingroups}
\usage{
prepare_proteingroups(
  object,
  filter_reverse = TRUE,
  filter_contaminants = TRUE,
  filter_complete_nondetects = TRUE,
  invert_subgroups = character(0),
  log2transform = TRUE,
 
    impute_consistent_nas = stringi::stri_detect_fixed(autonomics.import::guess_maxquant_quantity(object),
    "Intensity", case_insensitive = TRUE),
  deconvolution_fastafile = NULL,
  verbose = TRUE,
  plot = TRUE
)
}
\arguments{
\item{filter_reverse}{logical:   filter out "reverse peptide" groups (used for peptide identification FDR computation)?}

\item{filter_contaminants}{logical:   filter out contaminant groups?}

\item{filter_complete_nondetects}{logical:   filter out proteingroups with no quantification for any sample?}

\item{invert_subgroups}{string vector: names of subgroups that require inversion (e.g. WT_KD -> KD_WT)}

\item{log2transform}{logical:   log2 transform?}

\item{impute_consistent_nas}{logical:   impute consistent NA values (i.e. those replicated in all samples of the same subgroup)?}

\item{deconvolution_fastafile}{NULL or string: deconvolute proteingroups using this fastafile (optional)}

\item{verbose}{logical:   message progress?}
}
\description{
Prepare proteingroups
}
\examples{
require(magrittr)

# Stem cell comparison: triple SILAC design
   if (require(autonomics.data)){
      object <- 'extdata/stemcomp/maxquant/proteinGroups.txt' \%>\%
                 system.file(package = 'autonomics.data') \%>\%  
                 read_proteingroups()
      object \%>\% prepare_proteingroups(invert_subgroups = c('E_EM', 'E_BM', 'EM_BM'))
   }
   
# Stem cell differentiation: internal standard design
   if (require(autonomics.data)){
      # Read
      object <- 'extdata/stemdiff/maxquant/proteinGroups.txt' \%>\%
                 system.file(package = 'autonomics.data') \%>\%  
                 read_proteingroups()
              
      # Check and remedy subgroup definitions
      object$subgroup \%>\% unique()
      object \%<>\% filter_samples(
                     stringi::stri_detect_fixed(subgroup, 'STD') &
                     stringi::stri_detect_fixed(subgroup, 'BLANK', negate = TRUE), 
                     verbose = TRUE)
      object$subgroup \%<>\% stringi::stri_replace_first_fixed('_STD', '')
      object$subgroup \%<>\% factor(c('EM00', 'EM01', 'EM02', 'EM05', 'EM15', 'EM30', 'BM00'))
   
      # Prepare
      object \%<>\% prepare_proteingroups()
   }

# LFQ design
   if (require(graumann.lfq)){
      file <- system.file('extdata/proteinGroups.txt', package = 'graumann.lfq')
      object <- file \%>\% autonomics::read_proteingroups()
      object \%>\% autonomics::prepare_proteingroups()
   }
}
