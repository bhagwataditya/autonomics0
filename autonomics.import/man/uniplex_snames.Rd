% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_proteingroups.R
\name{uniplex_snames}
\alias{uniplex_snames}
\alias{uniplex_snames.character}
\alias{uniplex_snames.SummarizedExperiment}
\title{Uniplex snames}
\usage{
uniplex_snames(x, ...)

\method{uniplex_snames}{character}(x, verbose = FALSE)

\method{uniplex_snames}{SummarizedExperiment}(x, verbose = FALSE)
}
\arguments{
\item{x}{character vector or SummarizedExperiment}

\item{verbose}{logical(1)}
}
\description{
For charactervector or SummarizedExperiment
}
\examples{
require(magrittr)

# character vector
    # Alternate multiplexing forms supported
     autonomics.import::uniplex_snames("STD(L)_EM00(M)_EM01(H)_R1{M/L}")     # Label Ratio
     autonomics.import::uniplex_snames('A(0)_B(1)_C(2)_D(3)_R1{0}'     )     # Reporter intensity
     autonomics.import::uniplex_snames('STD(L)_EM00(M)_EM01(H)_R1{L}')       # Label Intensity

   # Alternate separators supported
     autonomics.import::uniplex_snames('STD(L)_EM00(M)_EM01(H)_R1{L}')       # underscore
     autonomics.import::uniplex_snames('STD(L).EM00(M).EM01(H).R1{L}')       # dot
     autonomics.import::uniplex_snames('STD(L)EM00(M)EM01(H).R1{L}')         # no separator

   # Composite snames supported
     autonomics.import::uniplex_snames("WT.t0(L)_WT.t1(M)_WT.t2(H)_R1{H/L}") # composite snames

   # Uniqueness ensured by appending labels when necessary
     autonomics.import::uniplex_snames(c("STD(L).BM00(M).BM00(H).R10{M/L}",  # implicit uniquification
                                         "STD(L).BM00(M).BM00(H).R10{H/L}"))
   # Uniplexed snames are returned unchanged
     autonomics.import::uniplex_snames(c('STD_R1', 'EM0_R1'))

# SummarizedExperiment
  if (require(autonomics.data)){
     x <- 'extdata/stemdiff/maxquant/proteinGroups.txt' \%>\%
           system.file(package = 'autonomics.data')     \%>\%
           autonomics.import::read_proteingroups_asis() \%>\%
           autonomics.import::clean_maxquant_snames()
     x \%>\% autonomics.import::uniplex_snames(verbose = TRUE)
  }

}
